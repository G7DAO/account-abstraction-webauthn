/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestCoin,
  TestCoinInterface,
} from "../../../contracts/tests/TestCoin";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "b",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "c",
            type: "uint256",
          },
        ],
        internalType: "struct TestCoin.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reverting",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "structInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "c",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wasteGas",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f9806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636a6278421161005b5780636a627842146100ee57806370a0823114610101578063dd62ed3e1461012a578063ffdd5cf11461016357600080fd5b806325d9185c146100825780633b6a02f61461009d57806362a16020146100a5575b600080fd5b61008a610198565b6040519081526020015b60405180910390f35b61008a6101d6565b6100d36100b33660046102f0565b600260208190526000918252604090912080546001820154919092015483565b60408051938452602084019290925290820152606001610094565b61008a6100fc3660046102f0565b610237565b61008a61010f3660046102f0565b6001600160a01b031660009081526020819052604090205490565b61008a610138366004610312565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101766101713660046102f0565b61026e565b6040805182518152602080840151908201529181015190820152606001610094565b60405162461bcd60e51b815260206004820152600c60248201526b1a5b9b995c8b5c995d995c9d60a21b604482015260009060640160405180910390fd5b60408051808201909152601781527f737472696e6720746f206265206475706c69636174656400000000000000000060208201526000905b8081604051602001610221929190610380565b604051602081830303815290604052905061020e565b6001600160a01b0381166000908152602081905260408120805460649190839061026290849061039d565b91829055509392505050565b61029260405180606001604052806000815260200160008152602001600081525090565b506001600160a01b0316600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b80356001600160a01b03811681146102eb57600080fd5b919050565b60006020828403121561030257600080fd5b61030b826102d4565b9392505050565b6000806040838503121561032557600080fd5b61032e836102d4565b915061033c602084016102d4565b90509250929050565b6000815160005b81811015610366576020818501810151868301520161034c565b81811115610375576000828601525b509290920192915050565b600061039561038f8386610345565b84610345565b949350505050565b600082198211156103be57634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122047df9bd90b9065b796d7faf0610b4183e98967beab888847f9047b3e5973112764736f6c634300080f0033";

type TestCoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCoin__factory extends ContractFactory {
  constructor(...args: TestCoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestCoin> {
    return super.deploy(overrides || {}) as Promise<TestCoin>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestCoin {
    return super.attach(address) as TestCoin;
  }
  override connect(signer: Signer): TestCoin__factory {
    return super.connect(signer) as TestCoin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCoinInterface {
    return new utils.Interface(_abi) as TestCoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCoin {
    return new Contract(address, _abi, signerOrProvider) as TestCoin;
  }
}
